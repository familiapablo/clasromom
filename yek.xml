<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[


<!DOCTYPE html>

<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/familiapablo/clasromom@main/style.css"/>

<style>
        /* Убираем выделение по нажатию клавиш */
        canvas:focus {
            outline: none;
        }

        html, body {
            /* Убираем отступы */
            padding: 0;
            margin: 0;
            /* Отключаем скролл и лонгтап на IOS */
            overflow: hidden;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            /* Ставим высоту на 100% */
            height: 100%;
        }
    </style>

</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas" tabindex="-1"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/familiapablo/clasromom@main/gs.png"/></div>
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<!-- Additional body modules -->
<script>
    const hideFullScreenButton = "";
    const buildUrl = "https://cdn.jsdelivr.net/gh/familiapablo/clasromom@main/Build";
    const loaderUrl = buildUrl + "/YandexBrotli.loader.js";
    const config = {
        dataUrl: buildUrl + "/YandexBrotli.data.br", // Data dosyasına dokunmuyoruz
        frameworkUrl: buildUrl + "/YandexBrotli.framework.js",
        codeUrl: buildUrl + "/YandexBrotli.wasm.br", // Görünürde orijinal dosya, ama aşağıda birleştirilecek
        streamingAssetsUrl: "StreamingAssets",
        companyName: "Brain massage",
        productName: "Car Ball 3D",
        productVersion: "0.0.52"
    };

    const container = document.querySelector("#unity-container");
    const canvas = document.querySelector("#unity-canvas");
    const loadingCover = document.querySelector("#loading-cover");
    const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
    const progressBarFull = document.querySelector("#unity-progress-bar-full");
    const spinner = document.querySelector('.spinner');

    // Parçaları birleştirme fonksiyonu
    async function loadAndMergeWasm() {
        const partUrls = [
            `${buildUrl}/YandexBrotli.wasm.br.part001`,
            `${buildUrl}/YandexBrotli.wasm.br.part002`,
            `${buildUrl}/YandexBrotli.wasm.br.part003`,
            `${buildUrl}/YandexBrotli.wasm.br.part004`,
            `${buildUrl}/YandexBrotli.wasm.br.part005`
        ];

        // Tüm parçaları paralel olarak indir
        const responses = await Promise.all(
            partUrls.map(url => fetch(url).then(res => res.arrayBuffer()))
        );

        // Parçaları birleştir
        const totalLength = responses.reduce((sum, buffer) => sum + buffer.byteLength, 0);
        const mergedArray = new Uint8Array(totalLength);
        let offset = 0;

        for (const buffer of responses) {
            mergedArray.set(new Uint8Array(buffer), offset);
            offset += buffer.byteLength;
        }

        // Birleştirilmiş dosyayı Blob olarak oluştur
        const wasmBlob = new Blob([mergedArray], { type: 'application/wasm' });
        const wasmUrl = URL.createObjectURL(wasmBlob);

        // Unity config'deki codeUrl'i güncelle
        config.codeUrl = wasmUrl;
        
        
                // Unity loader'ı başlat
        const script = document.createElement('script');
        script.src = loaderUrl;
        script.onload = () => {
            createUnityInstance(canvas, config, (progress) => {
                // İlerleme çubuğu güncelleme
                progressBarFull.style.width = 100 * progress + "%";
                if (progress === 1) {
                    loadingCover.style.display = "none";
                    spinner.style.display = "none";
                }
            }).catch((error) => {
                console.error("Unity yükleme hatası:", error);
            });
        };
        document.body.appendChild(script);
    }



    // Parça birleştirmeyi başlat
    loadAndMergeWasm();

        const canFullscreen = (function () {
            for (const key of [
                'exitFullscreen',
                'webkitExitFullscreen',
                'webkitCancelFullScreen',
                'mozCancelFullScreen',
                'msExitFullscreen',
            ]) {
                if (key in document) {
                    return true;
                }
            }
            return false;
        }());

        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            container.className = "unity-mobile";
            
        }

        // Фоновое изображение при загрузке игры. При сборке билда код меняется взависимости от настроек проекта.
        
        loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/familiapablo/clasromom@main/background.png') center / cover";

        loadingCover.style.display = "";

        document.addEventListener('contextmenu', event => event.preventDefault());

        function FocusGame() {
            window.focus();
            canvas.focus();
        }

        window.addEventListener('pointerdown', FocusGame);
        window.addEventListener('touchstart', FocusGame);

        let StartUnityInstance;
        let myGameInstance;
        let ysdk = null; // Yandex SDK pasif

        // 
        let environmentData = {
            language: "en",
            domain: "default_domain",
            deviceType: "desktop",
            isMobile: false,
            isDesktop: true,
            isTablet: false,
            isTV: false,
            appID: "default_app_id",
            browserLang: navigator.language || "en",
            payload: null,
            promptCanShow: false,
            reviewCanShow: false,
            platform: navigator.platform,
            browser: (function() {
                let userAgent = navigator.userAgent;
                if (userAgent.includes("YaBrowser")) return "Yandex";
                if (userAgent.includes("OPR") || userAgent.includes("Opera")) return "Opera";
                if (userAgent.includes("Firefox")) return "Firefox";
                if (userAgent.includes("MSIE") || userAgent.includes("Trident")) return "IE";
                if (userAgent.includes("Edge")) return "Edge";
                if (userAgent.includes("Chrome")) return "Chrome";
                if (userAgent.includes("Safari")) return "Safari";
                return "Other";
            })()
        };
        
        let cloudSaves = 'noData';
        let paymentsData = 'none';
        let playerData = 'noData'; // Varsayılan playerData tanımı
        let player = null;
        let payments = null;
        let initGame = false;
        let nowFullAdOpen = false;

        // 
        function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); }
        function SaveCloud() { console.warn("SaveCloud is not implemented"); }
        function LoadCloud() { console.warn("LoadCloud is not implemented"); return Promise.resolve("noData"); }
        function InitPlayer() { console.warn("InitPlayer is not implemented"); return Promise.resolve("noData"); }


        function FullAdShow() {
    try {
        // Prevent multiple fullscreen ads from opening simultaneously
        if (!nowFullAdOpen) {
            nowFullAdOpen = true;

            // If the game is initialized, notify Unity to open the fullscreen ad
            if (initGame) {
                myGameInstance.SendMessage("YandexGame", "OpenFullAd");
            }

            // Simulate ad duration (500ms) and then close it
            setTimeout(() => {
                nowFullAdOpen = false;
                if (initGame) {
                    myGameInstance.SendMessage("YandexGame", "CloseFullAd", "true");
                }
                FocusGame(); // Refocus the game after ad closes
            }, 500);
        }
    } catch (error) {
        // Silently handle any errors
    }
}


function RewardedShow(rewardId) {
    try {
        // Notify Unity to open the rewarded video with the given reward ID
        myGameInstance.SendMessage("YandexGame", "RewardVideo", rewardId);

        // After the ad, close it and refocus the game
        function closeRewardedAd() {
            myGameInstance.SendMessage("YandexGame", "CloseRewardVideo");
            FocusGame();
        }
        closeRewardedAd(); // Immediate closure for simplicity; in practice, this might be delayed or conditional
    } catch (error) {
        // Silently handle any errors
    }
}



        function StickyAdActivity() { console.warn("StickyAdActivity is not implemented"); }
        function Review() { console.warn("Review is not implemented"); }
        function PromptShow() { console.warn("PromptShow is not implemented"); }
        function InitLeaderboards() { console.warn("InitLeaderboards is not implemented"); }
        function GetLeaderboardScores() { console.warn("GetLeaderboardScores is not implemented"); }
        function SetLeaderboardScores() { console.warn("SetLeaderboardScores is not implemented"); }
        function ConsumePurchase() { console.warn("ConsumePurchase is not implemented"); }
        function ConsumePurchases() { console.warn("ConsumePurchases is not implemented"); } // 



        function InitGame() {
            try {
                console.log('Init Game Success');
                initGame = true;
                if (nowFullAdOpen === true && myGameInstance != null) {
                    myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
                }
            } catch (error) {
                console.error("InitGame sırasında hata:", error);
            }
        }

        // 
        window.addEventListener("unhandledrejection", function(event) {
            console.warn("Hata es geçildi:", event.reason);
            event.preventDefault();
        });
    </script>

    <script>
// ----------- Yandex SDK Fallback Tam Koruma -----------
// Bu kod, Yandex SDK olmadan çalışan unblocked sürümler içindir.
// Tüm sdk / ysdk / YandexGame / YandexSDK fonksiyonlarını sessizce yoksayar.

(function() {
  // Tüm global objeleri güvenli hale getir
  const fakeFn = () => {};
  const fakePromise = () => Promise.resolve({ value: false, reason: "no_sdk" });

  // Yandex SDK yoksa sahte sürümler oluştur
  window.sdk = window.sdk || {
    getPlayer: () => Promise.resolve({
      getMode: () => "lite",
      getData: () => Promise.resolve({ data: "" }),
      setData: () => Promise.resolve(),
    }),
    feedback: {
      canReview: fakePromise,
      requestReview: fakePromise
    },
    adv: {
      showRewardedVideo: fakePromise,
      showFullscreenAdv: fakePromise
    },
    getLeaderboards: fakePromise,
    getPayments: fakePromise,
  };

  window.ysdk = window.ysdk || window.sdk;
  window.YandexSDK = window.YandexSDK || {};
  window.YandexGame = window.YandexGame || {};

  // Sessiz fallback fonksiyonlar
  window.showFullScreenAdv = window.showFullScreenAdv || fakeFn;
  window.ShowInter = window.ShowInter || fakeFn;
  window.ShowRewarded = window.ShowRewarded || fakeFn;
  window.initPlayer = window.initPlayer || fakeFn;
  window.auth = window.auth || fakeFn;

  // Olası Unity mesaj hatalarını da bastır
  window.unityInstance = window.unityInstance || {
    SendMessage: function() { /* yok say */ }
  };

  console.log("...");
})();
</script>


<!-- GOOGLE -->
<style>
  /* Container: Top center, fixed, with overflow hidden */
  #ad-container {
    position: fixed;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: min(728px, calc(100% - 20px)); /* 728px, 10px margin on mobile */
    height: 90px;
    background: rgba(0, 0, 0, 0.90);
    display: none;
    z-index: 99999;
    border-radius: 0; /* Sharp corners */
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.45);
    box-sizing: border-box;
    transition: transform 0.5s ease-in-out; /* Smooth slide-in/out animation */
  }

  /* Slide-out animation */
  #ad-container.hidden {
    transform: translate(-50%, -100%); /* Slide up out of view */
  }

  #ad-iframe {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 745px; /* Updated width */
    height: 90px; /* Updated height */
    border: 0;
    display: block;
    overflow: hidden;
    pointer-events: auto;
    box-sizing: content-box;
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  #ad-iframe::-webkit-scrollbar {
    display: none;
    width: 0;
    height: 0;
  }

  /* Close button with arrow */
  #close-ad {
    position: absolute;
    top: 6px;
    right: 8px;
    background: #ff4d4d;
    color: #fff;
    border: none;
    padding: 5px 9px;
    font-size: 13px;
    border-radius: 4px;
    cursor: not-allowed;
    opacity: 0.72;
    z-index: 100000;
    display: flex;
    align-items: center;
  }
  #close-ad.enabled {
    cursor: pointer;
    opacity: 1;
  }
  #close-ad::before {
    content: '↑'; /* Up arrow */
    margin-right: 4px;
  }

  /* Right mask for scrollbar */
  #ad-right-mask {
    position: absolute;
    top: 0;
    right: 0;
    width: 12px;
    height: 100%;
    pointer-events: none;
    background: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.9));
    z-index: 99999;
  }

  /* Mobile adjustments */
  @media (max-width: 440px) {
    #ad-container {
      width: calc(100% - 12px);
      left: 50%;
      transform: translateX(-50%);
      border-radius: 0; /* Sharp corners on mobile */
    }
    #ad-iframe {
      width: 708px;
    }
  }
</style>

<div id="ad-container" aria-hidden="true" role="dialog" aria-label="Advertisement">
  <iframe
    id="ad-iframe"
    src="https://script.google.com/macros/s/AKfycbwO0_-Mbrs-AoE1MqbBxyaIzK385M7xGx4jDkq-FDsbR9wNcqft1m3554Np5XINfbRViw/exec"
    width="768px"
    height="95px"
    scrolling="no"
    frameborder="0"

    sandbox="allow-scripts allow-popups allow-same-origin"
  ></iframe>
  <button id="close-ad" disabled>Close (12)</button>
  <div id="ad-right-mask"></div>
</div>

<script>
  (function () {
    const showDelay = 2000; // 2 seconds delay before first show
    const countdownStart = 12; // 12 seconds countdown
    const reappearDelay = 25000; // 25 seconds before reappearance
    const adContainer = document.getElementById('ad-container');
    const closeBtn = document.getElementById('close-ad');

    function showAd() {
      // Show ad with smooth slide-in
      adContainer.style.display = 'block';
      adContainer.classList.remove('hidden');
      adContainer.setAttribute('aria-hidden', 'false');

      // Start countdown
      let timeLeft = countdownStart;
      closeBtn.textContent = `Close (${timeLeft})`;
      closeBtn.disabled = true;
      closeBtn.classList.remove('enabled');

      const t = setInterval(() => {
        timeLeft--;
        if (timeLeft > 0) {
          closeBtn.textContent = `Close (${timeLeft})`;
        } else {
          clearInterval(t);
          closeBtn.disabled = false;
          closeBtn.classList.add('enabled');
          closeBtn.textContent = 'Close ↑';
        }
      }, 1000);
    }

    // Initial ad show
    setTimeout(showAd, showDelay);

    // Close with animation and schedule reappearance
    closeBtn.addEventListener('click', () => {
      if (closeBtn.disabled) return;
      adContainer.classList.add('hidden');
      adContainer.setAttribute('aria-hidden', 'true');
      // Schedule reappearance without removing or reloading iframe
      setTimeout(showAd, reappearDelay);
    });
  })();
</script>

</body>
</html>




]]></Content>
</Module>